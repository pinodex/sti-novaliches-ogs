CONTRIBUTING GUIDE

Welcome! The source code has been handed to you. This file will document the
guides in contributing to the source code. This should be followed to be able
to produce a good code that can be easily understandable by anyone working on
the code.

-- INTRODUCTION --

This software requires the following:
    - PHP >= 5.4
        - PDO PHP Extension
        - OpenSSL PHP Extension
        - Mbstring PHP Extension
        - Tokenizer PHP Extension
        - XML PHP Extension
    - MySQL >= 5
    - NodeJS (optional, for asset management)
    - Ruby (optional, for SASS compilation)

This software uses the following components:
    - Silex PHP micro-framework
    - Symfony 2.8 Components
    - Laravel 5.0 Components
    - Grunt (optional, for asset management)
    - Grunt SASS (optional, for asset management)
    - Grunt Watch (optional, for asset management)
    - SASS Ruby Gem (optional, for SASS compilation)
 
 * package names and versions can be found at composer.json and package.json
   file

-- STANDARDS --

PHP code should follow the following PSRs:
    - PSR-1: Basic Coding Standard (http://www.php-fig.org/psr/psr-1/)
    - PSR-2: Coding Style Guide (http://www.php-fig.org/psr/psr-2/)
    - PSR-4: Autoloader (http://www.php-fig.org/psr/psr-4/)

phpDocumentor is used as the documentation standard
(https://www.phpdoc.org/docs/latest/index.html).

Each classes and its methods should be documented at header level.

Versioning should follow Semantic Versioning as described at http://semver.org/

-- CODING PATTERNS --

This software uses MVC (model-view-controller) pattern.
    References:
        http://www.sitepoint.com/the-mvc-pattern-and-php-1/
        http://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488

-- APPLICATION DIRECTORY STRUCTURE --

    ├── Constraints
    ├── Controllers
    ├── Models
    ├── Providers
    ├── Routes
    ├── Services
    ├── Traits
    └── Views

 * Constraints - contains classes for form input assertion
 * Controllers - contains controller classes
 * Models - contains model classes for each database table
 * Providers - contains application service providers
 * Routes - contains route classes which maps URLs to controllers
 * Services - contains service classes and custom code logics
 * Traits - contains class methods that are used in many classes
 * Views - contains HTML template files for view rendering

Please follow the pattern as close as possible.

-- REMARKS --

This may be a lot, but it helps the code to be cleaner and easier to maintain.

For future code maintainers, please do not remove attributions from the
source code. But of course, you may always add yours. Let at least pay the
efforts into giving each maintainers their attributions to their works.

Cheers!
